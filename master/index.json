{"repository_name":"base32","body":"# base32\n[![Crystal CI](https://github.com/didactic-drunk/base32/actions/workflows/crystal.yml/badge.svg)](https://github.com/didactic-drunk/base32/actions/workflows/crystal.yml)\n[![GitHub release](https://img.shields.io/github/release/didactic-drunk/base32.svg)](https://github.com/didactic-drunk/base32/releases)\n![GitHub commits since latest release (by date) for a branch](https://img.shields.io/github/commits-since/didactic-drunk/base32/latest)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://didactic-drunk.github.io/base32/master)\n\nProvides encoding and decoding of base32 and base32hex as defined in RFC 4648.\n\nMaintained here temporarily (or permanently) until @noumar returns.\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  base32:\n    github: didactic-drunk/base32\n```\n\n## Usage\n\n```crystal\nrequire \"base32\"\n\nBase32.encode(\"Hello World!\") # => \"JBSWY3DPEBLW64TMMQQQ====\"\nBase32.encode(\"Hello World!\", false) # => \"JBSWY3DPEBLW64TMMQQQ\"\n\nBase32.decode_string(\"JBSWY3DPEBLW64TMMQQQ====\") # => \"Hello World!\"\nBase32.decode_string(\"JBSWY3DPEBLW64TMMQQQ\") # => \"Hello World!\"\n```\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it ( https://github.com/didactic-drunk/base32/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [noumar](https://github.com/noumar) / Mikael Karlsson - creator\n- [didactic-drunk](https://github.com/didactic-drunk) - current maintainer\n","program":{"html_id":"base32/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"base32","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"base32/Base32","path":"Base32.html","kind":"module","full_name":"Base32","name":"Base32","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/base32.cr","line_number":19,"url":"https://github.com/didactic-drunk/base32/blob/dc20cd10a4f6a873dc632f01a35e496f14c3880f/src/base32.cr#L19"},{"filename":"src/base32/version.cr","line_number":1,"url":"https://github.com/didactic-drunk/base32/blob/dc20cd10a4f6a873dc632f01a35e496f14c3880f/src/base32/version.cr#L1"}],"repository_name":"base32","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"IGNORE_CHARS","name":"IGNORE_CHARS","value":"['\\n'.ord, '\\r'.ord, '='.ord]","doc":null,"summary":null},{"id":"VERSION","name":"VERSION","value":"\"0.1.1\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"base32/Base32","kind":"module","full_name":"Base32","name":"Base32"}],"subclasses":[],"including_types":[],"namespace":null,"doc":"The Base32 module provides for the encoding (`encode`, `hex_encode`) and\ndecoding (`decode`, `decode_string`, `hex_decode`, `hex_decode_string`) of\nbinary data using a Base32 representation as defined in RFC 4648.\n\n### Examples\n\nA simple encoding and decoding:\n```\nrequire \"base32\"\n\nBase32.encode(\"Hello World!\")        # => \"JBSWY3DPEBLW64TMMQQQ====\"\nBase32.encode(\"Hello World!\", false) # => \"JBSWY3DPEBLW64TMMQQQ\"\n\nBase32.decode_string(\"JBSWY3DPEBLW64TMMQQQ====\") # => \"Hello World!\"\nBase32.decode_string(\"JBSWY3DPEBLW64TMMQQQ\")     # => \"Hello World!\"\n```","summary":"<p>The Base32 module provides for the encoding (<code><a href=\"Base32.html#encode(data,pad:Bool=true):String-instance-method\">#encode</a></code>, <code><a href=\"Base32.html#hex_encode(data,pad:Bool=true):String-instance-method\">#hex_encode</a></code>) and decoding (<code><a href=\"Base32.html#decode(data):Bytes-instance-method\">#decode</a></code>, <code><a href=\"Base32.html#decode_string(data):String-instance-method\">#decode_string</a></code>, <code><a href=\"Base32.html#hex_decode(data):Bytes-instance-method\">#hex_decode</a></code>, <code><a href=\"Base32.html#hex_decode_string(data):String-instance-method\">#hex_decode_string</a></code>) of binary data using a Base32 representation as defined in RFC 4648.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"decode(data):Bytes-instance-method","html_id":"decode(data):Bytes-instance-method","name":"decode","doc":"Decode base32 data, regardless if padded or not","summary":"<p>Decode base32 data, regardless if padded or not</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data) : Bytes","args_html":"(data) : Bytes","location":{"filename":"src/base32.cr","line_number":94,"url":"https://github.com/didactic-drunk/base32/blob/dc20cd10a4f6a873dc632f01a35e496f14c3880f/src/base32.cr#L94"},"def":{"name":"decode","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"from_base32(data, DEC_STD)"}},{"id":"decode_string(data):String-instance-method","html_id":"decode_string(data):String-instance-method","name":"decode_string","doc":"Decode base32 data, regardless if padded or not","summary":"<p>Decode base32 data, regardless if padded or not</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data) : String","args_html":"(data) : String","location":{"filename":"src/base32.cr","line_number":99,"url":"https://github.com/didactic-drunk/base32/blob/dc20cd10a4f6a873dc632f01a35e496f14c3880f/src/base32.cr#L99"},"def":{"name":"decode_string","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.new(from_base32(data, DEC_STD))"}},{"id":"encode(data,pad:Bool=true):String-instance-method","html_id":"encode(data,pad:Bool=true):String-instance-method","name":"encode","doc":"Encode data as base32 with padding, or without if `pad` = false","summary":"<p>Encode data as base32 with padding, or without if <code>pad</code> = false</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"pad","doc":null,"default_value":"true","external_name":"pad","restriction":"Bool"}],"args_string":"(data, pad : Bool = <span class=\"n\">true</span>) : String","args_html":"(data, pad : Bool = <span class=\"n\">true</span>) : String","location":{"filename":"src/base32.cr","line_number":89,"url":"https://github.com/didactic-drunk/base32/blob/dc20cd10a4f6a873dc632f01a35e496f14c3880f/src/base32.cr#L89"},"def":{"name":"encode","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"pad","doc":null,"default_value":"true","external_name":"pad","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"to_base32(data, pad, CHARS_STD)"}},{"id":"hex_decode(data):Bytes-instance-method","html_id":"hex_decode(data):Bytes-instance-method","name":"hex_decode","doc":"Decode base32hex data, regardless if padded or not","summary":"<p>Decode base32hex data, regardless if padded or not</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data) : Bytes","args_html":"(data) : Bytes","location":{"filename":"src/base32.cr","line_number":109,"url":"https://github.com/didactic-drunk/base32/blob/dc20cd10a4f6a873dc632f01a35e496f14c3880f/src/base32.cr#L109"},"def":{"name":"hex_decode","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"from_base32(data, DEC_HEX)"}},{"id":"hex_decode_string(data):String-instance-method","html_id":"hex_decode_string(data):String-instance-method","name":"hex_decode_string","doc":"Decode base32hex data, regardless if padded or not","summary":"<p>Decode base32hex data, regardless if padded or not</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"args_string":"(data) : String","args_html":"(data) : String","location":{"filename":"src/base32.cr","line_number":114,"url":"https://github.com/didactic-drunk/base32/blob/dc20cd10a4f6a873dc632f01a35e496f14c3880f/src/base32.cr#L114"},"def":{"name":"hex_decode_string","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.new(from_base32(data, DEC_HEX))"}},{"id":"hex_encode(data,pad:Bool=true):String-instance-method","html_id":"hex_encode(data,pad:Bool=true):String-instance-method","name":"hex_encode","doc":"Encode data as base32hex with padding, or without if `pad` = false","summary":"<p>Encode data as base32hex with padding, or without if <code>pad</code> = false</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"pad","doc":null,"default_value":"true","external_name":"pad","restriction":"Bool"}],"args_string":"(data, pad : Bool = <span class=\"n\">true</span>) : String","args_html":"(data, pad : Bool = <span class=\"n\">true</span>) : String","location":{"filename":"src/base32.cr","line_number":104,"url":"https://github.com/didactic-drunk/base32/blob/dc20cd10a4f6a873dc632f01a35e496f14c3880f/src/base32.cr#L104"},"def":{"name":"hex_encode","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"pad","doc":null,"default_value":"true","external_name":"pad","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"to_base32(data, pad, CHARS_HEX)"}}],"macros":[],"types":[]}]}}